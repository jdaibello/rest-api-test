name: Deploy Infrastructure

on:
  push:
    branches:
      - feature/*
      - current
      - develop
      - qa
      - uat
      - main

jobs:
  setup:
    name: Setup Environment
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set Environment Variables
        id: set-vars

        run: |
          COMMIT_HASH_SHORT=$(git rev-parse --short HEAD)
          echo "COMMIT_HASH_SHORT=${COMMIT_HASH_SHORT}" >> .env

          case "${GITHUB_REF#refs/heads/}" in
            feature/*)
              KUSTOMIZE_PATH=terraform/k8s/overlays/sandbox
              TAG=sandbox
              ;;
            current)
              KUSTOMIZE_PATH=terraform/k8s/overlays/sandbox
              TAG=sandbox
              ;;
            develop)
              KUSTOMIZE_PATH=terraform/k8s/overlays/dev
              TAG=dev
              ;;
            qa)
              KUSTOMIZE_PATH=terraform/k8s/overlays/qa
              TAG=qa
              ;;
            uat)
              KUSTOMIZE_PATH=terraform/k8s/overlays/uat
              TAG=uat
              ;;
            main)
              KUSTOMIZE_PATH=terraform/k8s/overlays/prod
              TAG=latest
              ;;
          esac

          echo "KUSTOMIZE_PATH=${KUSTOMIZE_PATH}" >> .env
          echo "DOCKER_IMAGE_TAG=${TAG}" >> .env

      - name: Upload .env file
        uses: actions/upload-artifact@v3
        with:
          name: env-file
          path: .env

      - name: Log envs
        run: |
          source .env

          echo "COMMIT_HASH_SHORT=$COMMIT_HASH_SHORT"
          echo "KUSTOMIZE_PATH=$KUSTOMIZE_PATH"
          echo "DOCKER_IMAGE_TAG=$DOCKER_IMAGE_TAG"

  docker:
    name: Build and Push Docker Image
    runs-on: self-hosted
    needs: setup

    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      PLATFORMS: linux/amd64,linux/arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download .env file
        uses: actions/download-artifact@v3
        with:
          name: env-file
          path: .

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PAT }}" | docker login docker.io -u "$DOCKER_USERNAME" --password-stdin

      - name: Build and push Docker image

        env:
          COMMIT_HASH_SHORT: ${{ env.COMMIT_HASH_SHORT }}
          DOCKER_IMAGE_TAG: ${{ env.DOCKER_IMAGE_TAG }}

        run: |
          source .env

          echo "COMMIT_HASH_SHORT=${COMMIT_HASH_SHORT}"
          echo "DOCKER_IMAGE_TAG=${DOCKER_IMAGE_TAG}"

          docker buildx build --platform $PLATFORMS -f Dockerfile -t docker.io/$DOCKER_USERNAME/rest-api-test:${COMMIT_HASH_SHORT} -t docker.io/$DOCKER_USERNAME/rest-api-test:${DOCKER_IMAGE_TAG} --push .

  terraform:
    name: Deploy Terraform Infrastructure
    runs-on: self-hosted
    needs: [setup, docker]

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      KUBECONFIG: ${{ secrets.KUBECONFIG_CONTENT }}
      TERRAFORM_DIR: terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download .env from artifacts
        uses: actions/download-artifact@v3
        with:
          name: env-file
          path: .

      - name: Install Kind and GAWK using Homebrew
        run: brew install kind && brew install gawk

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Check if kind cluster exists
        id: check-cluster
        run: |
          if kind get clusters | grep -q "rest-api-test-local-cluster"; then
            echo "CLUSTER_EXISTS=true" >> $GITHUB_ENV
          else
            echo "CLUSTER_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Get kubeconfig
        if: env.CLUSTER_EXISTS == 'true'
        run: |
          mkdir -p ${{ runner.workspace }}/terraform/k8s/.kube
          touch ${{ runner.workspace }}/terraform/k8s/.kube/config.yaml

          kind get kubeconfig --name rest-api-test-local-cluster > ${{ runner.workspace }}/terraform/k8s/.kube/config.yaml

      - name: Replace image tag in deployment YAML
        run: |
          source .env

          sed -i '' "s|docker.io/jpdev99/rest-api-test:sandbox|docker.io/jpdev99/rest-api-test:${COMMIT_HASH_SHORT}|g" ${{ runner.workspace }}/rest-api-test/terraform/k8s/base/deployment.yaml

      - name: Replace namespace in all k8s manifests
        run: |
          source .env

          # sed -i '' "s|\${path.module}/../k8s/base/service.yaml|\${{ runner.workspace }}/terraform/k8s/base/service.yaml|g" \${{ runner.workspace }}/terraform/resources/kubernetes.tf

          for file in ${{ runner.workspace }}/rest-api-test/terraform/k8s/base/*.yaml; do
            sed -i '' "s|namespace: rest-api-test-sandbox-ns|namespace: rest-api-test-${DOCKER_IMAGE_TAG}-ns|g" "$file"
            # sed -i '' "s|\${path.cwd}/k8s|\${{ runner.workspace }}/terraform/k8s|g" "$file"
          done

      - name: Verify paths and list files
        run: |
          echo "Current working directory: $(pwd)"
          echo "Listing files in $(pwd):"
          ls -al $(pwd)
          echo "Listing files in ${{ runner.workspace }}/terraform:"
          ls -al ${{ runner.workspace }}/terraform
          echo "Listing files in ${{ runner.workspace }}/terraform/k8s:"
          ls -al ${{ runner.workspace }}/terraform/k8s
          echo "Listing files in ${{ runner.workspace }}/terraform/k8s/base:"
          ls -al ${{ runner.workspace }}/terraform/k8s/base

      - name: Adjust kubeconfig path in Terraform resources
        run: |
          sed -i '' "s|config_path = \".*\"|config_path = \"${{ runner.workspace }}/terraform/k8s/.kube/config.yaml\"|g" ${{ runner.workspace }}/terraform/main.tf
          sed -i '' "s|config_path = \".*\"|config_path = \"${{ runner.workspace }}/terraform/k8s/.kube/config.yaml\"|g" ${{ runner.workspace }}/terraform/resources/main.tf
          sed -i '' "s|kubeconfig_path = \".*\"|kubeconfig_path = \"${{ runner.workspace }}/terraform/k8s/.kube/config.yaml\"|g" ${{ runner.workspace }}/terraform/cluster/kind.tf

      - name: Terraform Init
        run: terraform -chdir=$TERRAFORM_DIR init -input=false -reconfigure

      - name: Terraform Validate
        run: terraform -chdir=$TERRAFORM_DIR validate

      - name: Prepare tfvars
        run: |
          source .env
          mkdir -p ${{ runner.workspace }}/terraform/tfvars
          touch ${{ runner.workspace }}/terraform/tfvars/.env.terraform

          cat <<EOF > ${{ runner.workspace }}/terraform/tfvars/.env.terraform
          dockerhub_email = "${{ secrets.DOCKER_EMAIL }}"
          dockerhub_username = "${{ secrets.DOCKER_USERNAME }}"
          dockerhub_password = "${{ secrets.DOCKER_PAT }}"
          EOF

          echo ".env.terraform=$(cat ${{ runner.workspace }}/terraform/tfvars/.env.terraform)"

      - name: Terraform Plan - Cluster Module
        run: terraform -chdir=$TERRAFORM_DIR plan -target=module.cluster -var-file=${{ runner.workspace }}/terraform/tfvars/.env.terraform -out=tfplan

      - name: Terraform Apply - Cluster Module
        run: terraform -chdir=$TERRAFORM_DIR apply -auto-approve -target=module.cluster -var-file=${{ runner.workspace }}/terraform/tfvars/.env.terraform

      - name: Get new kubeconfig
        run: |
          mkdir -p ${{ runner.workspace }}/terraform/k8s/.kube
          touch ${{ runner.workspace }}/terraform/k8s/.kube/config.yaml

          kind get kubeconfig --name rest-api-test-local-cluster > ${{ runner.workspace }}/terraform/k8s/.kube/config.yaml

      - name: Set permissions for kubeconfig
        run: chmod 600 ${{ runner.workspace }}/terraform/k8s/.kube/config.yaml

      - name: Display kubeconfig content
        run: cat ${{ runner.workspace }}/terraform/k8s/.kube/config.yaml

      - name: Get cluster info
        run: kubectl --kubeconfig ${{ runner.workspace }}/terraform/k8s/.kube/config.yaml cluster-info

      - name: Set cluster context
        run: kubectl --kubeconfig ${{ runner.workspace }}/terraform/k8s/.kube/config.yaml config use-context kind-rest-api-test-local-cluster

      - name: Delete Kubernetes services and postgres pod to be created by Terraform Apply
        id: delete_services
        run: |
          source .env

          kubectl --kubeconfig ${{ runner.workspace }}/terraform/k8s/.kube/config.yaml delete svc rest-api-test -n rest-api-test-sandbox-ns || true
          kubectl --kubeconfig ${{ runner.workspace }}/terraform/k8s/.kube/config.yaml delete svc postgres -n rest-api-test-sandbox-ns || true
          kubectl --kubeconfig ${{ runner.workspace }}/terraform/k8s/.kube/config.yaml delete pods -all -n rest-api-test-sandbox-ns || true

          for i in {1..10}; do
            if kubectl --kubeconfig ${{ runner.workspace }}/terraform/k8s/.kube/config.yaml get svc rest-api-test -n rest-api-test-sandbox-ns 2>/dev/null; then
              sleep 5
            else
              break
            fi
          done

          for i in {1..10}; do
            if kubectl --kubeconfig ${{ runner.workspace }}/terraform/k8s/.kube/config.yaml get svc postgres -n rest-api-test-sandbox-ns 2>/dev/null; then
              sleep 5
            else
              break
            fi
          done

          for i in {1..10}; do
            if kubectl --kubeconfig ${{ runner.workspace }}/terraform/k8s/.kube/config.yaml get pods -n rest-api-test-sandbox-ns 2>/dev/null; then
              sleep 5
            else
              break
            fi
          done

      - name: Terraform Plan - Resources Module
        run: terraform -chdir=$TERRAFORM_DIR plan -target=module.resources -var-file=${{ runner.workspace }}/terraform/tfvars/.env.terraform -out=tfplan

      - name: Terraform Apply - Resources Module
        run: terraform -chdir=$TERRAFORM_DIR apply -auto-approve -target=module.resources -var-file=${{ runner.workspace }}/terraform/tfvars/.env.terraform

      - name: Get Kubernetes resources
        run: |
          source .env

          kubectl --kubeconfig ${{ runner.workspace }}/terraform/k8s/.kube/config.yaml get all -n rest-api-test-${DOCKER_IMAGE_TAG}-ns

        # Test rest-api-test service using port-forward on host machine when every cluster resource is READY
        # kubectl --kubeconfig ${{ runner.workspace }}/terraform/k8s/.kube/config.yaml port-forward service/rest-api-test 3000:3000 -n rest-api-test-${DOCKER_IMAGE_TAG}-ns
        # Example: kubectl --kubeconfig /Users/jpedro/_work/rest-api-test/terraform/k8s/.kube/config.yaml port-forward svc/rest-api-test 3000:3000 -n rest-api-test-sandbox-ns

      - name: Terraform Destroy Plan
        run: terraform -chdir=$TERRAFORM_DIR plan -destroy -var-file=${{ runner.workspace }}/terraform/tfvars/.env.terraform -out=destroy-plan.tfplan
